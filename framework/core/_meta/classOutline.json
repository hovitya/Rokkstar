{
    "classes": [
        {
            "name": "DataGroup",
            "description": "The DataGroup class is the base container class for data items. The DataGroup class converts data items to visual\relements for display. While this container can hold visual elements, it is often used only to hold data items as\rchildren.",
            "package": "core.components",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "DataGroup",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "ItemRenderer",
            "description": "",
            "package": "core.components",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ItemRenderer",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "ArrayCollection",
            "description": "",
            "package": "core.data",
            "extends": [
                "core.Component"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ArrayCollection",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
                "{Array} source",
                "{Function} sort",
                "{Function} filter"
            ],
            "functions": [
                {
                    "name": "getXMLData",
                    "access": "",
                    "virtual": false,
                    "description": "Returns <code>fallback</code> value when attribute is not set or the component is not initialized in layout xml.\rIf the <code>data</code> attribute is set it will returns its value.",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "String",
                            "description": "XML attribute name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "fallback",
                            "type": "*",
                            "description": "Default value when attribute is not set or the component is not initialized in layout xml",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "setXMLData",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "String",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "data",
                            "type": "*",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getInstanceClass",
                    "access": "",
                    "virtual": false,
                    "description": "Use this method when you want to create a class name which is available only in the current object scope.",
                    "parameters": [
                        {
                            "name": "className",
                            "type": "String",
                            "description": "Requested class name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                        "<pre><code>\r    var class=this.getInstanceClass('moveHandler'); //Will return id4321moveHandler\r    $(this).find('.'+class); //This will prevent selecting moveHandlers from child components\r</code></pre>"
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "createEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "When the EventDispatcher object triggers this <code>event</code> the given function will be called within the\rgiven scope. The function will be called every time when the event is triggered until the event won't be removed.\r<code>\r     myEventDispatcher.createEventListener('layoutChange',this.onLayoutChange,this);\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "String",
                            "description": "Event name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "description": "Function to call",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "Object",
                            "description": "Scope for callback function",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "once",
                            "type": "Boolean",
                            "description": "Optional. Will dismiss event listener after the first trigger if this value is true",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerDOMEvent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerEvent",
                    "access": "",
                    "virtual": false,
                    "description": "Triggers the named event. Every event handler which is registered to the named event will be called.\r<code>\r     myEventDispatcher.triggerEvent('layoutChanged');\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": [
                                "String",
                                "core.Event"
                            ],
                            "description": "Event name.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "deleteEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "The specified handler will be removed and never will be called again.",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                }
            ],
            "properties": [
                {
                    "name": "master",
                    "access": "",
                    "virtual": false,
                    "description": "Master component\rThis component defines this instance",
                    "type": {
                        "names": [
                            "core.VisualComponent"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "createComponent",
                    "access": "",
                    "virtual": false,
                    "description": "Produce a component instance",
                    "type": ""
                },
                {
                    "name": "handlers",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "Object"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                }
            ]
        },
        {
            "name": "ArrayCollectionCursor",
            "description": "",
            "package": "core.data",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ArrayCollectionCursor",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "CollectionEvent",
            "description": "",
            "package": "core.data.events",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CollectionEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "CursorEvent",
            "description": "",
            "package": "core.data.events",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CursorEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "PropertyChangeEvent",
            "description": "",
            "package": "core.events",
            "extends": [
                "core.Event"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "PropertyChangeEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "RendererExistenceEvent",
            "description": "",
            "package": "core.events",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "RendererExistenceEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "CheckBox",
            "description": "",
            "package": "core.form",
            "extends": [
                "core.helpers.FormItem"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CheckBox",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "functions": [
                {
                    "name": "__mouseEvent",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "updateTabIndex",
                    "access": "",
                    "virtual": false,
                    "description": "Sets tab index to DOM element. You must override it in subclasses.",
                    "parameters": [
                        {
                            "name": "newIndex",
                            "type": "integer",
                            "description": "The new tab index.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__validationHandler",
                    "access": "protected",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.form.validators.ValidationResultEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "buildDOM",
                    "access": "",
                    "virtual": false,
                    "description": "DOM builder hook",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "_buildDOM",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "empty",
                    "access": "",
                    "virtual": false,
                    "description": "Removes all child element",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "widthChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Width change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "heightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Height change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "xChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "X change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "yChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Y change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "leftChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Left change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "rightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Right change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "topChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Top change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "bottomChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Bottom change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__gridChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Grid change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getXMLData",
                    "access": "",
                    "virtual": false,
                    "description": "Returns <code>fallback</code> value when attribute is not set or the component is not initialized in layout xml.\rIf the <code>data</code> attribute is set it will returns its value.",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "String",
                            "description": "XML attribute name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "fallback",
                            "type": "*",
                            "description": "Default value when attribute is not set or the component is not initialized in layout xml",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "setXMLData",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "String",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "data",
                            "type": "*",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getInstanceClass",
                    "access": "",
                    "virtual": false,
                    "description": "Use this method when you want to create a class name which is available only in the current object scope.",
                    "parameters": [
                        {
                            "name": "className",
                            "type": "String",
                            "description": "Requested class name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                        "<pre><code>\r    var class=this.getInstanceClass('moveHandler'); //Will return id4321moveHandler\r    $(this).find('.'+class); //This will prevent selecting moveHandlers from child components\r</code></pre>"
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "createEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "When the EventDispatcher object triggers this <code>event</code> the given function will be called within the\rgiven scope. The function will be called every time when the event is triggered until the event won't be removed.\r<code>\r     myEventDispatcher.createEventListener('layoutChange',this.onLayoutChange,this);\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "String",
                            "description": "Event name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "description": "Function to call",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "Object",
                            "description": "Scope for callback function",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "once",
                            "type": "Boolean",
                            "description": "Optional. Will dismiss event listener after the first trigger if this value is true",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerDOMEvent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerEvent",
                    "access": "",
                    "virtual": false,
                    "description": "Triggers the named event. Every event handler which is registered to the named event will be called.\r<code>\r     myEventDispatcher.triggerEvent('layoutChanged');\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": [
                                "String",
                                "core.Event"
                            ],
                            "description": "Event name.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "deleteEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "The specified handler will be removed and never will be called again.",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                }
            ],
            "properties": [
                {
                    "name": "parent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "core.Container"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "master",
                    "access": "",
                    "virtual": false,
                    "description": "Master component\rThis component defines this instance",
                    "type": {
                        "names": [
                            "core.VisualComponent"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "createComponent",
                    "access": "",
                    "virtual": false,
                    "description": "Produce a component instance",
                    "type": ""
                },
                {
                    "name": "handlers",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "Object"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                }
            ]
        },
        {
            "name": "Textarea",
            "description": "",
            "package": "core.form",
            "extends": [
                "core.helpers.FormItem"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Textarea",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "functions": [
                {
                    "name": "__mouseEvent",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "updateTabIndex",
                    "access": "",
                    "virtual": false,
                    "description": "Sets tab index to DOM element. You must override it in subclasses.",
                    "parameters": [
                        {
                            "name": "newIndex",
                            "type": "integer",
                            "description": "The new tab index.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__validationHandler",
                    "access": "protected",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.form.validators.ValidationResultEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "buildDOM",
                    "access": "",
                    "virtual": false,
                    "description": "DOM builder hook",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "_buildDOM",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "empty",
                    "access": "",
                    "virtual": false,
                    "description": "Removes all child element",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "widthChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Width change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "heightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Height change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "xChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "X change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "yChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Y change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "leftChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Left change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "rightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Right change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "topChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Top change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "bottomChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Bottom change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__gridChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Grid change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getXMLData",
                    "access": "",
                    "virtual": false,
                    "description": "Returns <code>fallback</code> value when attribute is not set or the component is not initialized in layout xml.\rIf the <code>data</code> attribute is set it will returns its value.",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "String",
                            "description": "XML attribute name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "fallback",
                            "type": "*",
                            "description": "Default value when attribute is not set or the component is not initialized in layout xml",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "setXMLData",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "String",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "data",
                            "type": "*",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getInstanceClass",
                    "access": "",
                    "virtual": false,
                    "description": "Use this method when you want to create a class name which is available only in the current object scope.",
                    "parameters": [
                        {
                            "name": "className",
                            "type": "String",
                            "description": "Requested class name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                        "<pre><code>\r    var class=this.getInstanceClass('moveHandler'); //Will return id4321moveHandler\r    $(this).find('.'+class); //This will prevent selecting moveHandlers from child components\r</code></pre>"
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "createEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "When the EventDispatcher object triggers this <code>event</code> the given function will be called within the\rgiven scope. The function will be called every time when the event is triggered until the event won't be removed.\r<code>\r     myEventDispatcher.createEventListener('layoutChange',this.onLayoutChange,this);\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "String",
                            "description": "Event name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "description": "Function to call",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "Object",
                            "description": "Scope for callback function",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "once",
                            "type": "Boolean",
                            "description": "Optional. Will dismiss event listener after the first trigger if this value is true",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerDOMEvent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerEvent",
                    "access": "",
                    "virtual": false,
                    "description": "Triggers the named event. Every event handler which is registered to the named event will be called.\r<code>\r     myEventDispatcher.triggerEvent('layoutChanged');\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": [
                                "String",
                                "core.Event"
                            ],
                            "description": "Event name.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "deleteEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "The specified handler will be removed and never will be called again.",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                }
            ],
            "properties": [
                {
                    "name": "parent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "core.Container"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "master",
                    "access": "",
                    "virtual": false,
                    "description": "Master component\rThis component defines this instance",
                    "type": {
                        "names": [
                            "core.VisualComponent"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "createComponent",
                    "access": "",
                    "virtual": false,
                    "description": "Produce a component instance",
                    "type": ""
                },
                {
                    "name": "handlers",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "Object"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                }
            ]
        },
        {
            "name": "TextareaBase",
            "description": "",
            "package": "core.form",
            "extends": [
                "core.VisualComponent"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "TextareaBase",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "properties": [
                {
                    "name": "parent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "core.Container"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "master",
                    "access": "",
                    "virtual": false,
                    "description": "Master component\rThis component defines this instance",
                    "type": {
                        "names": [
                            "core.VisualComponent"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "createComponent",
                    "access": "",
                    "virtual": false,
                    "description": "Produce a component instance",
                    "type": ""
                },
                {
                    "name": "handlers",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "Object"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                }
            ],
            "functions": [
                {
                    "name": "buildDOM",
                    "access": "",
                    "virtual": false,
                    "description": "DOM builder hook",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "_buildDOM",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "empty",
                    "access": "",
                    "virtual": false,
                    "description": "Removes all child element",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "widthChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Width change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "heightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Height change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "xChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "X change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "yChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Y change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "leftChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Left change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "rightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Right change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "topChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Top change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "bottomChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Bottom change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__gridChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Grid change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getXMLData",
                    "access": "",
                    "virtual": false,
                    "description": "Returns <code>fallback</code> value when attribute is not set or the component is not initialized in layout xml.\rIf the <code>data</code> attribute is set it will returns its value.",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "String",
                            "description": "XML attribute name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "fallback",
                            "type": "*",
                            "description": "Default value when attribute is not set or the component is not initialized in layout xml",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "setXMLData",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "String",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "data",
                            "type": "*",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getInstanceClass",
                    "access": "",
                    "virtual": false,
                    "description": "Use this method when you want to create a class name which is available only in the current object scope.",
                    "parameters": [
                        {
                            "name": "className",
                            "type": "String",
                            "description": "Requested class name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                        "<pre><code>\r    var class=this.getInstanceClass('moveHandler'); //Will return id4321moveHandler\r    $(this).find('.'+class); //This will prevent selecting moveHandlers from child components\r</code></pre>"
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "createEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "When the EventDispatcher object triggers this <code>event</code> the given function will be called within the\rgiven scope. The function will be called every time when the event is triggered until the event won't be removed.\r<code>\r     myEventDispatcher.createEventListener('layoutChange',this.onLayoutChange,this);\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "String",
                            "description": "Event name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "description": "Function to call",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "Object",
                            "description": "Scope for callback function",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "once",
                            "type": "Boolean",
                            "description": "Optional. Will dismiss event listener after the first trigger if this value is true",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerDOMEvent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerEvent",
                    "access": "",
                    "virtual": false,
                    "description": "Triggers the named event. Every event handler which is registered to the named event will be called.\r<code>\r     myEventDispatcher.triggerEvent('layoutChanged');\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": [
                                "String",
                                "core.Event"
                            ],
                            "description": "Event name.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "deleteEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "The specified handler will be removed and never will be called again.",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                }
            ]
        },
        {
            "name": "NumberValidator",
            "description": "<p>The NumberValidator class ensures that a String represents a valid number. It can ensure that the input\rfalls within a given range (specified by minValue and maxValue), is an integer (specified by domain), is non-negative\r(specified by allowNegative), and does not exceed the specified precision. The validator correctly validates\rformatted numbers (e.g., \"12,345.67\") and you can customize the thousandsSeparator and decimalSeparator properties\rfor internationalization.</p>",
            "package": "core.form.validators",
            "extends": [
                "core.form.validators.Validator"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "NumberValidator",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "functions": [
                {
                    "name": "__triggerChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__triggerEventChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__sourceChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__trigger",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "handleResults",
                    "access": "protected",
                    "virtual": false,
                    "description": "Returns a ValidationResultEvent from the Array of error results.\rInternally, this function takes the results from the doValidation() method and puts it into a\rValidationResultEvent object. Subclasses, such as the RegExpValidator class, should override this function if\rthey output a subclass of ValidationResultEvent objects, such as the RegExpValidationResult objects, and needs\rto populate the object with additional information. You never call this function directly, and you should rarely\roverride it.",
                    "parameters": [
                        {
                            "name": "results",
                            "type": "Array",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "core.form.validators.ValidationResultEvent",
                        "description": ""
                    }
                },
                {
                    "name": "doValidation",
                    "access": "protected",
                    "virtual": false,
                    "description": "Executes the validation logic of this validator, including validating that a missing or empty value causes a validation error as defined by the value of the required property.\rIf you create a subclass of a validator class, you must override this method.",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "object",
                            "description": "Value to validate.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "Array",
                        "description": "For an invalid result, an Array of ValidationResult objects, with one ValidationResult object for each field examined by the validator that failed validation."
                    }
                },
                {
                    "name": "getValueFromSource",
                    "access": "",
                    "virtual": false,
                    "description": "Returns the Object to validate. Complex subclasses override this method because they need to access the values\rfrom multiple subfields.",
                    "parameters": [
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "object",
                        "description": ""
                    }
                },
                {
                    "name": "isRealValue",
                    "access": "protected",
                    "virtual": false,
                    "description": "Returns true if value is not null.",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "object",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "Boolean",
                        "description": "true if value is not null"
                    }
                }
            ]
        },
        {
            "name": "RegExpValidator",
            "description": "",
            "package": "core.form.validators",
            "extends": [
                "core.form.validators.Validator"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "RegExpValidator",
                "description": "Validate field against regular expression",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "functions": [
                {
                    "name": "__triggerChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__triggerEventChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__sourceChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__trigger",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "handleResults",
                    "access": "protected",
                    "virtual": false,
                    "description": "Returns a ValidationResultEvent from the Array of error results.\rInternally, this function takes the results from the doValidation() method and puts it into a\rValidationResultEvent object. Subclasses, such as the RegExpValidator class, should override this function if\rthey output a subclass of ValidationResultEvent objects, such as the RegExpValidationResult objects, and needs\rto populate the object with additional information. You never call this function directly, and you should rarely\roverride it.",
                    "parameters": [
                        {
                            "name": "results",
                            "type": "Array",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "core.form.validators.ValidationResultEvent",
                        "description": ""
                    }
                },
                {
                    "name": "doValidation",
                    "access": "protected",
                    "virtual": false,
                    "description": "Executes the validation logic of this validator, including validating that a missing or empty value causes a validation error as defined by the value of the required property.\rIf you create a subclass of a validator class, you must override this method.",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "object",
                            "description": "Value to validate.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "Array",
                        "description": "For an invalid result, an Array of ValidationResult objects, with one ValidationResult object for each field examined by the validator that failed validation."
                    }
                },
                {
                    "name": "getValueFromSource",
                    "access": "",
                    "virtual": false,
                    "description": "Returns the Object to validate. Complex subclasses override this method because they need to access the values\rfrom multiple subfields.",
                    "parameters": [
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "object",
                        "description": ""
                    }
                },
                {
                    "name": "isRealValue",
                    "access": "protected",
                    "virtual": false,
                    "description": "Returns true if value is not null.",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "object",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "Boolean",
                        "description": "true if value is not null"
                    }
                }
            ]
        },
        {
            "name": "StringValidator",
            "description": "",
            "package": "core.form.validators",
            "extends": [
                "core.form.validators.Validator"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "StringValidator",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "functions": [
                {
                    "name": "__triggerChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__triggerEventChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__sourceChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.events.PropertyChangeEvent",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__trigger",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "handleResults",
                    "access": "protected",
                    "virtual": false,
                    "description": "Returns a ValidationResultEvent from the Array of error results.\rInternally, this function takes the results from the doValidation() method and puts it into a\rValidationResultEvent object. Subclasses, such as the RegExpValidator class, should override this function if\rthey output a subclass of ValidationResultEvent objects, such as the RegExpValidationResult objects, and needs\rto populate the object with additional information. You never call this function directly, and you should rarely\roverride it.",
                    "parameters": [
                        {
                            "name": "results",
                            "type": "Array",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "core.form.validators.ValidationResultEvent",
                        "description": ""
                    }
                },
                {
                    "name": "doValidation",
                    "access": "protected",
                    "virtual": false,
                    "description": "Executes the validation logic of this validator, including validating that a missing or empty value causes a validation error as defined by the value of the required property.\rIf you create a subclass of a validator class, you must override this method.",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "object",
                            "description": "Value to validate.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "Array",
                        "description": "For an invalid result, an Array of ValidationResult objects, with one ValidationResult object for each field examined by the validator that failed validation."
                    }
                },
                {
                    "name": "getValueFromSource",
                    "access": "",
                    "virtual": false,
                    "description": "Returns the Object to validate. Complex subclasses override this method because they need to access the values\rfrom multiple subfields.",
                    "parameters": [
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "object",
                        "description": ""
                    }
                },
                {
                    "name": "isRealValue",
                    "access": "protected",
                    "virtual": false,
                    "description": "Returns true if value is not null.",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "object",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "Boolean",
                        "description": "true if value is not null"
                    }
                }
            ]
        },
        {
            "name": "ValidationResult",
            "description": "",
            "package": "core.form.validators",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ValidationResult",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "ValidationResultEvent",
            "description": "",
            "package": "core.form.validators",
            "extends": [
                "core.Event"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ValidationResultEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "Validator",
            "description": "",
            "package": "core.form.validators",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Validator",
                "description": "The Validator class is the base class for all Rokkstar validators. This class implements the ability for a validator\rto make a field required, which means that the user must enter a value in the field or the validation fails.",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "GraphicsElement",
            "description": "",
            "package": "core.graphics",
            "extends": [
                "core.DrawableComponent"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "GraphicsElement",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "properties": [
                {
                    "name": "graphics",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "CanvasRenderingContext2D"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "canvas",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "HTMLCanvasElement"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "parent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "core.Container"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "master",
                    "access": "",
                    "virtual": false,
                    "description": "Master component\rThis component defines this instance",
                    "type": {
                        "names": [
                            "core.VisualComponent"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "createComponent",
                    "access": "",
                    "virtual": false,
                    "description": "Produce a component instance",
                    "type": ""
                },
                {
                    "name": "handlers",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "Object"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                }
            ],
            "functions": [
                {
                    "name": "buildDOM",
                    "access": "",
                    "virtual": false,
                    "description": "DOM builder hook",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "_buildDOM",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "empty",
                    "access": "",
                    "virtual": false,
                    "description": "Removes all child element",
                    "parameters": [
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "widthChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Width change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "heightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Height change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "xChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "X change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "yChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Y change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "leftChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Left change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "rightChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Right change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "topChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Top change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "bottomChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Bottom change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "__gridChanged",
                    "access": "private",
                    "virtual": false,
                    "description": "Grid change handler",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getXMLData",
                    "access": "",
                    "virtual": false,
                    "description": "Returns <code>fallback</code> value when attribute is not set or the component is not initialized in layout xml.\rIf the <code>data</code> attribute is set it will returns its value.",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "String",
                            "description": "XML attribute name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "fallback",
                            "type": "*",
                            "description": "Default value when attribute is not set or the component is not initialized in layout xml",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "setXMLData",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "String",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "data",
                            "type": "*",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getInstanceClass",
                    "access": "",
                    "virtual": false,
                    "description": "Use this method when you want to create a class name which is available only in the current object scope.",
                    "parameters": [
                        {
                            "name": "className",
                            "type": "String",
                            "description": "Requested class name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                        "<pre><code>\r    var class=this.getInstanceClass('moveHandler'); //Will return id4321moveHandler\r    $(this).find('.'+class); //This will prevent selecting moveHandlers from child components\r</code></pre>"
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "createEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "When the EventDispatcher object triggers this <code>event</code> the given function will be called within the\rgiven scope. The function will be called every time when the event is triggered until the event won't be removed.\r<code>\r     myEventDispatcher.createEventListener('layoutChange',this.onLayoutChange,this);\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "String",
                            "description": "Event name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "description": "Function to call",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "Object",
                            "description": "Scope for callback function",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "once",
                            "type": "Boolean",
                            "description": "Optional. Will dismiss event listener after the first trigger if this value is true",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerDOMEvent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerEvent",
                    "access": "",
                    "virtual": false,
                    "description": "Triggers the named event. Every event handler which is registered to the named event will be called.\r<code>\r     myEventDispatcher.triggerEvent('layoutChanged');\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": [
                                "String",
                                "core.Event"
                            ],
                            "description": "Event name.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "deleteEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "The specified handler will be removed and never will be called again.",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                }
            ]
        },
        {
            "name": "GridLayout",
            "description": "",
            "package": "core.layouts",
            "extends": [
                "core.layouts.Layout"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "GridLayout",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ],
            "events": [
                {
                    "name": "selfRefreshLayout",
                    "access": "private",
                    "virtual": false,
                    "description": "Refresh layout listener",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "core.Event",
                            "description": "Event object",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                }
            ],
            "functions": [
                {
                    "name": "doLayout",
                    "access": "",
                    "virtual": false,
                    "description": "Applies layout to div.",
                    "parameters": [
                        {
                            "name": "div",
                            "type": "core.VisualContainer",
                            "description": "The layout object applies layout format to this div.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getXMLData",
                    "access": "",
                    "virtual": false,
                    "description": "Returns <code>fallback</code> value when attribute is not set or the component is not initialized in layout xml.\rIf the <code>data</code> attribute is set it will returns its value.",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "String",
                            "description": "XML attribute name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "fallback",
                            "type": "*",
                            "description": "Default value when attribute is not set or the component is not initialized in layout xml",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "setXMLData",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "String",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "data",
                            "type": "*",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "getInstanceClass",
                    "access": "",
                    "virtual": false,
                    "description": "Use this method when you want to create a class name which is available only in the current object scope.",
                    "parameters": [
                        {
                            "name": "className",
                            "type": "String",
                            "description": "Requested class name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                        "<pre><code>\r    var class=this.getInstanceClass('moveHandler'); //Will return id4321moveHandler\r    $(this).find('.'+class); //This will prevent selecting moveHandlers from child components\r</code></pre>"
                    ],
                    "returns": {
                        "type": "String",
                        "description": ""
                    }
                },
                {
                    "name": "createEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "When the EventDispatcher object triggers this <code>event</code> the given function will be called within the\rgiven scope. The function will be called every time when the event is triggered until the event won't be removed.\r<code>\r     myEventDispatcher.createEventListener('layoutChange',this.onLayoutChange,this);\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "String",
                            "description": "Event name",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "description": "Function to call",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "Object",
                            "description": "Scope for callback function",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "once",
                            "type": "Boolean",
                            "description": "Optional. Will dismiss event listener after the first trigger if this value is true",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerDOMEvent",
                    "access": "",
                    "virtual": false,
                    "description": "",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "Event",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "triggerEvent",
                    "access": "",
                    "virtual": false,
                    "description": "Triggers the named event. Every event handler which is registered to the named event will be called.\r<code>\r     myEventDispatcher.triggerEvent('layoutChanged');\r</code>",
                    "parameters": [
                        {
                            "name": "event",
                            "type": [
                                "String",
                                "core.Event"
                            ],
                            "description": "Event name.",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                },
                {
                    "name": "deleteEventListener",
                    "access": "",
                    "virtual": false,
                    "description": "The specified handler will be removed and never will be called again.",
                    "parameters": [
                        {
                            "name": "event",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "listener",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "scope",
                            "type": "",
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [
                    ]
                }
            ],
            "properties": [
                {
                    "name": "master",
                    "access": "",
                    "virtual": false,
                    "description": "Master component\rThis component defines this instance",
                    "type": {
                        "names": [
                            "core.VisualComponent"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                },
                {
                    "name": "createComponent",
                    "access": "",
                    "virtual": false,
                    "description": "Produce a component instance",
                    "type": ""
                },
                {
                    "name": "handlers",
                    "access": "private",
                    "virtual": false,
                    "description": "",
                    "type": {
                        "names": [
                            "Object"
                        ],
                        "optional": null,
                        "nullable": null,
                        "variable": null
                    }
                }
            ]
        },
        {
            "name": "FaultEvent",
            "description": "",
            "package": "core.network.events",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "FaultEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "InvokeEvent",
            "description": "",
            "package": "core.network.events",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "InvokeEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "ResponseEvent",
            "description": "",
            "package": "core.network.events",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ResponseEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        },
        {
            "name": "ResultEvent",
            "description": "",
            "package": "core.network.events",
            "extends": [
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ResultEvent",
                "description": "",
                "parameters": [
                ],
                "examples": [
                ]
            },
            "arguments": [
            ]
        }
    ],
    "interfaces": [
        {
            "name": "ICollectionView",
            "description": "",
            "package": "core.data",
            "extends": [
            ]
        },
        {
            "name": "IList",
            "description": "",
            "package": "core.data",
            "extends": [
            ]
        },
        {
            "name": "IViewCursor",
            "description": "",
            "package": "core.data",
            "extends": [
            ]
        },
        {
            "name": "IFactory",
            "description": "",
            "package": "core",
            "extends": [
            ]
        }
    ]
}
